#!/bin/bash
#
# Automate the process of compiling and loading DETPIC32
#
# ===========================================================================
#
# - The process automated is as follows
# $ pcompile progX.(c|s)
# $ sudo ldpic32 -w progX.hex
# $ sudo pterm
#
# - In case progX requires other files, they are also included
#
# Ricardo Jesus <rj (dot) bcjesus (at) gmail (dot) com>
#
# ===========================================================================

# Change this to "yes" if you want all files to be compiled by default.
# Only makes sense with .s files
COMPILEALL=${COMPILEALL:-"no"}

# Paths to executables
PIC32="/opt/pic32mx/bin/"
PCOMPILE="$PIC32""pcompile"
LDPIC32="$PIC32""ldpic32 -w"
PTERM="$PIC32""pterm"

while getopts "hauc" Option
do
    case $Option in
        h ) echo "Usage:"
            echo "  $0 [OPTIONS...] ARG"
            echo ""
            echo "The script's switches are:"
            echo "  -h          This help."
            echo "  -a          Compile all files in the current directory "
            echo "                  matching the extension of the argument."
            echo "  -u          Update this script."
            echo "  -c          Clean the working directory of extraneous"
            echo "                  files."
            exit
            ;;
        a ) COMPILEALL="yes"
            ;;
        u ) echo -n "Updating... "
            wget -qO "$0".tmp https://raw.githubusercontent.com/RJ-Jesus/pic32do/master/pic32do && chmod +x "$0".tmp
            echo "Done."
            "$0".tmp "${@:2}"
            mv "$0".tmp "$0" && exit
            ;;
        c)  echo -n "Cleaning... "
            rm -f *.elf
            rm -f *.map
            rm -f *.hex
            rm -f *.o
            exit
            ;;
        * ) echo "You passed an illegal switch to the program!"
            echo "Run '$0 -h' for more help."
            exit
            ;;
    esac
done

# End of option parsing.
shift $(($OPTIND - 1))

#  $1 now references the first non option item supplied on the command line
#  if one exists.
# ---------------------------------------------------------------------------

# Check if only a single argument was given. If not, do nothing
if [ "$#" -ne 1 ]; then
    >&2 echo "$0"": One and only one arg (name of file to compile) expected."
    exit 1
fi

# Split the given file's name at '.'
NAME=(${1//./ })

# NAME should look like "*.(c|s)"
if [ ${#NAME[@]} -lt 2 ]; then
    >&2 echo "$0"": Not a valid file name. Valid names should match *.(c|s)"
    exit 2
fi

# Get the file's extension
EXTENSION="${NAME[-1]}"
unset NAME[${#NAME[@]}-1]

# Assert EXTENSION is either 'c' or 's'
if [[ "$EXTENSION" != "c" && "$EXTENSION" != "s" ]]; then
    >&2 echo "$0"": Not a valid file name. Valid names should match *.(c|s)"
    exit 2
fi

# Join the rest of the file's name back together
IFS=. eval 'NAME="${NAME[*]}"'

# Get all other files if 'argument' is an assembly file
if [[ "$COMPILEALL" = "yes" && "$EXTENSION" = "s" ]]; then
    OTHERS=$(ls *."$EXTENSION" | grep -v "$NAME"."$EXTENSION"  | tr '\n' ' ')
fi

printf "\n+++++ Compiling +++++\n\n"
$PCOMPILE "$NAME"."$EXTENSION" "$OTHERS"

if [ $? -ne 0 ]; then
    >&2 echo "+++ pcompile error. Stopping."
    exit
fi
printf "\n+++++++ Done ++++++++\n"

# If not root, only compilation works
if [ "`id -u`" -ne "0" ]; then
    >&2 echo -e "\nUser doesn't have root privileges (needed to continue)."
    >&2 echo "If you want to load DETPIC32, run this script as root."
    exit 3
fi

# Make all output files as owned by the user
OTHERS=$(echo "${OTHERS[*]}" | sed "s/\.$EXTENSION/.o/g")
chown `who am i | awk '{print $1}'`: "$NAME".* $OTHERS

printf "\n+++++ Loading DETPIC32 +++++\n\n"
$LDPIC32 "$NAME".hex

if [ $? -ne 0 ]; then
    >&2 echo "+++ ldpic32 error. Stopping..."
    exit
fi
printf "\n+++++++++++ Done +++++++++++\n"

printf "\nOpening 'pterm' (Ctrl-c to exit)\n"
$PTERM
